// Generated by CoffeeScript 1.6.3
var f, filter, injectedScript, main, settings;

settings = {
  active: true
};

console.log('content');

chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
  console.log('content msg', request);
  if (request.type === "reFilter") {
    settings.filter = request.filter;
    filter();
  }
  return sendResponse({
    status: "ok"
  });
});

chrome.runtime.sendMessage({
  type: "getSettings"
}, function(set) {
  console.log("content settings", set);
  return settings = set;
});

filter = function() {
  var filterText;
  filterText = settings.filter;
  console.log('filtering by', filterText);
  $('[data-txt]').each(function(i, e) {
    return $(e).text($(e).attr('data-txt')).removeAttr('data-txt').removeClass('filter');
  });
  if (filterText.length === 0) {
    return;
  }
  return filterText.split(',').forEach(function(text) {
    var htmlElements;
    htmlElements = [];
    return 'p,a'.split(',').forEach(function(htmlElement) {
      htmlElements.push(htmlElement + ":contains('" + text + "')");
      return $(htmlElements.join(',')).each(function(i, e) {
        return $(e).attr('data-txt', $(e).text()).text('KABOOM').addClass('filter');
      });
    });
  });
};

$.expr[":"].contains = jQuery.expr.createPseudo(function(arg) {
  return function(elem) {
    return jQuery(elem).text().toUpperCase().indexOf(arg.toUpperCase()) >= 0;
  };
});

main = function() {
  var fireCustomEvent, myEvent;
  fireCustomEvent = function() {
    return document.body.dispatchEvent(myEvent);
  };
  myEvent = document.createEvent("Event");
  myEvent.initEvent("CustomEvent", true, true);
  if ($ && $(document).ajaxComplete) {
    return $(document).ajaxComplete(function(event, request, settings) {
      fireCustomEvent();
    });
  } else {
    
_core = window._core || {};
(function(){
  if(_core._preAjaxListeners) return;

  _core._preAjaxListeners = [];
  _core._postAjaxListeners = [];
  _core._fireAjaxEvents = function(flag, href){
      if (!href) return;
      var arr;
      if (flag == 'pre') arr = _core._preAjaxListeners;
      else if (flag == 'post') arr = _core._postAjaxListeners;
      else return;
      for(var i = 0, l = arr.length; i < l; i++){
          var x = arr[i];
          if(typeof x.match == 'string' && href == x.match)
              x.handler();
          else if (x.match.test && x.match.test(href))
              x.handler();
      }
  };

  _core.addPreAjaxListener = function(match, handler){
      _core._preAjaxListeners.push({ match: match, handler: handler });
  };

  _core.addPostAjaxListener = function(match, handler){
      _core._postAjaxListeners.push({ match: match, handler: handler });
  };

  XMLHttpRequest.prototype.open = (function(orig){
      return function(a,b,c){
          this._HREF = b;
          return orig.apply(this, arguments);
      };
  })(XMLHttpRequest.prototype.open);

  XMLHttpRequest.prototype.send = (function(orig){
      return function(){
          _core._fireAjaxEvents('pre', this._HREF);

          var xhr = this,
          waiter = setInterval(function(){
            console.log('trying');
              if(xhr.readyState && xhr.readyState == 4){                  
                  _core._fireAjaxEvents('post', xhr._HREF);
                  fireCustomEvent();
                  clearInterval(waiter);
              }
          }, 250);
          return orig.apply(this, arguments);
      };
  })(XMLHttpRequest.prototype.send);

})();
    ;
  }
};

injectedScript = document.createElement("script");

injectedScript.type = "text/javascript";

injectedScript.text = "(" + main + ")(\"\");";

(document.body || document.head).appendChild(injectedScript);

f = null;

document.body.addEventListener("CustomEvent", function() {
  if (f) {
    clearTimeout(f);
  }
  f = setTimeout(filter, 500);
});
